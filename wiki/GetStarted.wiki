#summary Get Started by Installing the Mobile Cloud Platform and Examples


===Install Cloud Server===

  * *Step 1:* Download and install JBoss-5.1.0.GA from [http://www.jboss.org/jbossas/downloads/ here]

  * *Step 2:* Copy *openmobster* to the JBoss AS _server_ directory. *openmobster* is a pre-configured/optimized instance for the OpenMobster Cloud Server

  * *Step 3:* In the case of using MySQL5 as the database, modify *openmobster-ds.xml* according to your own MySQL5 instance

  * *Step 4:* Start the JBoss AS instance with the OpenMobster binary installed using: 
    {{{run -c openmobster -b "a real IP address"}}}

    _*Note:*_ A real IP address like "192.168.0.1" or something like that is needed for the mobile device to be able to connect to the server. Even in the case of a simulation environment, the device's browser does not connect to a loopback address like "localhost" or "127.0.0.1"

  * *Step 5:* Verify the Cloud Server installation by typing in:
             {{{http://{cloudserverIp}:{port}/o}}}


----

===Provision a Device===

  * *Start the Management Console:* Execute _openmobster.sh_ or _openmobster.bat_ located under _cloudConsole/bin_

  * *Setup 'root' User:* If this the first time being used, use the configure command:
    {{{configure -a {cloudServer Ip Address} -po 1502 -u root -p {whatever root password you can remember}}}}

   _*Note:*_ This is the user who is allowed to use the *Management Console*, not to be confused with other accounts that will be created.The accounts that will be created are the actual users that will connect to the "Cloud Server" via their Mobile Apps loaded on their respective devices.

  * *Login to the Cloud Server as 'root':*
    {{{startadmin -u root -p {whatever password was setup}}}} 

  * *Setup a 'User' account to be used by the Mobile Apps:*
    {{{register -u {email of the user being registered} -p {whatever password that you want to associate with this account}}}}


----

===Install _Mobile Cloud_ runtime on the Blackberry Device===
*Mobile Cloud* runtime _MUST_ be installed on each device, before the device can integrate with the *Cloud Server*. Think of them as bootstrap binaries.


Each mobile platform will have its corresponding set of artifacts that must be first installed on the device. 

The current release consists of _Blackberry RIM OS 4.3.0+ support_

There are two ways to install the Blackberry binaries: _Over-The-Air (OTA)_, or _Desktop Sync_

====Over-The-Air (OTA)====

If you have a *Cloud Server* running and accessible from the Internet, you can simply download these binaries from the built-in browser of the device.

Download the following and follow the instructions provided by the device:

  * {{{http://{cloudServer IP}:{cloudServer port}/o/apps/rimos/430/mobileCloud.jad}}}
  
  * {{{http://{cloudServer IP}:{cloudServer port}/o/apps/rimos/430/cloudManager.jad}}}

====Desktop Sync====

If you want to install it via desktop synchronization, just install the following 'cod' files.

  * blackberry-4.3.0/bin/mobileCloud.cod

  * blackberry-4.3.0/bin/cloudManager.cod

----

===Device Activation===

  * *Step 1:* Launch the _cloudManager_ App.

  * *Step 2:* Select the _Activate_ function.

  * *Step 3:* Follow the wizard and provide the appropriate values for:
      * Server : IP Address of the _Cloud Server_
      * Email : the user id that was used to register the user via the _Management Console _
      * Password: the password that was used to register the user via the _Management Console_

----

===Installing Examples on the Cloud Server===

  * Copy _examples/offline-app/offline-app.jar_ to your _{jboss}/server/openmobster/deploy_ directory

  * Copy _examples/mobile-rpc/mobile-rpc.jar_ to your _{jboss}/server/openmobster/deploy_ directory

  * Restart your Cloud Server

----

===Install Examples on the Device===

  * Using your _cloudManager App_, install the deployed Moblets/Apps using the _App Store_ function

----

===Blackberry Signing Process===

Blackberry has a selected set of APIs which require "signing" the binary (.cod) before installing it on the device. The *OpenMobster* binaries make use of these APIs, and hence requires "signing" before installing it on the device. For more information about the
"signing" process: [http://na.blackberry.com/eng/developers/javaappdev/codekeys.jsp Signing Process]

Code Signing is not required for installing/testing Apps in a simulation environment. In fact all the *OpenMobster* binaries have been thoroughly tested on a 4.3.0 OS simulator. All tests have passed without any errors, warnings, or crashes.

At the time of this first community release, the *OpenMobster* Blackberry binaries have not been signed or tested on an actual device. The developer can sign and distribute these binaries along with their Apps, if they possess their own signing key. In the future, the binaries should come signed with the keys issued by RIM to the _OpenMobster Community_ 